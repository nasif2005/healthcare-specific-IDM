# AppointmentBooking1.py
# # This code simulates the PATIENT's actions to book a healthcare appointment.
# # It constructs an `AppointmentScheduleRequest` by combining the patient's pseudonym,
# # a single-use Appointment Token (AT), and appointment details.
# # The entire request is then digitally signed using a key derived from the patient's pseudonym,
# # ensuring authenticity and non-repudiation. This signed request is what would be sent
# # to the healthcare provider for verification.

from bplib.bp import BpGroup
from petlib.pack import encode, decode
import hashlib
import json
import random
import string
import time
import numpy as np



# public parameter of for the AT verification by the healthcare provider
n = 3839514345387410341423022334927189038634447016638837295033434667390789128372002206607351703997416831510199857890468938575112370145062730949064523058143131785479044281363019265694762100658698854299808954919854105518894694968662003390830447279926968144971289701239649573922706150830571090915654607491401127409249862667795578589532425982174437056981110499101593439616092595937018411712430485745028190239817713161876784875118039784829208417592536161434645857962093138993032093338095538038483715407550907439160658119295194071632592301734414971054550181766789371357507306967888454558151389948291730865474982106305463843997809395621723954587775109360748419318767802360259649195872369170513115889098664112709091426646947209181199849354139601061745706236776688203174170329312252949719962410918717528223157772941379515571230726974341634948998830685959576000835092469175311650252494295113829438877679689959647984237381769781161402492687
phi_n = 3839514345387410341423022334927189038634447016638837295033434667390789128372002206607351703997416831510199857890468938575112370145062730949064523058143131785479044281363019265694762100658698854299808954919854105518894694968662003390830447279926968144971289701239649573922706150830571090915654607491401127409249862667795578589532425982174437056981110499101593439616092595937018411712430485745028190239817713161876784875118039784829208417592536161434645857962093135041061371410628565170929368191049782530173439695665537036992655983861049560388966203191509918602711637052081738445248684837076977580608783171016419354355553468876081993693450626941214780475713593036008541027938541080697368756090655158173344212706814864725456050566135338452524415147150652792145172980439281617366231821350131691449924046475571797564959611226440984745527396551868768110254866715072767875278672189261218287834865184201833807294725304540043631944976
e = 65537
d = 1370840840559073722919225774981480634069417668528192530425367926244366919675549378708293368964639157125092184182661438480843711934087963157867476006492380497252302625076114069884061497983015617006595201735960849825848253163430157275158179896898105308820715133730664515925620660440431099323060289007603261977951958993602831124654305744188773558391458329927799333103086052952229943629692554373070397232425876531955305999555777849538713211823058022817786569883501186609484642715371435928324096103000959174565944663913177306385570858696075478943824407410747220430975625911800366173007216938565454604401558164374524260685804898274737058004379987179722670374768792643080456101328012004626969979153230084472863897235557944668064545633718369538590701283674536897987471238678895136560301179299811273757370229999571303099355935472900691244039177135315582114101250076536730328114586425324980495247692302747130769746696940673703113415025
# n bit length = 3072

# Issuer's Public Key Components:
R_values = [2197917715551317901390630523182966687613536696635569358583392315346089545171696976456428536907830941881945887892107834372220004431262416980922381881738534890248633617838530949094573217891586082423970410467389012943528974620419282707129769822822476934672972217548071515103985216010407305131555317342870259767340389512776990608075721501455594865461475908919508704238425389100958599670473062523837753052036137209247530382055796525017304703882627937881924498545161288958898526481867016872035040627029312941747958293720380884438583318880690689559841137254372147403336415145273266286312615408027304523668469500076996380046117795630097884140766448835012106419232936022274376121954496710418468430594284963856798103666602659806750368750549200835778722131241488166997501232105360432504497165612449668866461957815260456376819314942207208775423414339467566032820722251697870370215120842482224739063646924795505971094333647559622830185710, 3380937750991516271603253300470664540550298342041923386895520749703766788746769214820446007627874528001804385898418498069629662501798003438520533958032729462348371094272972929212286013792762293644890798134332510271809866973878782337280909321031467927520502195914514981477513219137239387202804013058128840207328694799663567487920169591537850881813086750473941958504515125542144100337294400547965111423401564471733255772882852611677082493727989138527088107000303467885180984961069942960271589754162965199308121055778082410155865299118153194634596275363173944297969884511473089824318512979487918820532979341488433458211696740795775031690721738381780577394660834266574934759550189972880107884060301515806274958278134068250615715117760554123562312147315058322078641495376399894417451849607049133810330273713559583780065691964067021773634572053429397985233521902179995145356560120901535086775784741418123113105472716571160385569268, 1447950163390734906649565412177841649681152371109699849506512103152123708269325702566750089349585425441413068574024188201103016578001943290464588225045018560896897930247409180172138496641253786756431639830515594169960296293330915700337917254186391080802312253317356506027108915603183820686043494886557850851328122769087984875635947759158745281067513985780571546466111040541797775805814437642346829260739001021106270786696704707130749398697027639873111604004024163371207716358660213535198380090930368838092370325514880689376866554041527359251566418392211425237317285746228700082379843133297018015528161704761397570996415089706265193229935820190677452561484817517820016830438768395344956942621946447174114207902571100395629830290378650400229302934417314531914226979890756241837839353140674414432286611547294836547316235537764684155849028768606962167049073942248588538842803823927227913043682079387546070047922372445147108778663, 1585128954903010492324234322289528701545587419102648938382019722538118117366256020650599401435055781355140854571293118977767389240979032444142543060201885019475205642387402348629621228252443410948926905583710928993458679224744279733044876550820324888518718984444131576703201241130132086459684441693778507766587400350879846122478822697513439250985151204479434087449742461230556130866463329628021308253170791073957969623679023480953849978028711988302053826646801565541397158283278198425047595803106212190349809972277598389939426884355544455639423957884718243588705015456363661297604415960751147305039969251593237995980477995219862610478051080921003014703497776282831542601692990384080777769986147261311222434249018688390716961944443038463430218413267534253072437235101552755358727791970089462439157562998456284027601900101282452362986734034125467933611252175688536334341723136013299566768303623363091480659299300181620398884030, 3466479517466151609328645223858831342749629474547484282791771367174973868897303485055749166632969055447350718747656757316853823436099945140874479267636552103687093208419732028190182937736791022924396159826289720098546196994505412221328957799311632229351684325053356292405140609680720671280094048303842161668461873065114950718272907516596322208631320948909942215927277426087371063160567714481544538646635461219084433379653991489285328478830314072453698455041654056587322807351148409019412606298531190956928189599974991353959914259259901685949623144829042197799578513817154191785648789656334556447707238968051406407108132729525174753376091635939986764052407604074925165351219279997180509653808731877390973203251758295977014649078590053014990624202752013567894792931687644485634882707226417207233023563733376291782660419622362672043045939504672488977273926078428916708904488771414008634312873716136242607895475353677795122621955, 3266378199924096991314936362946511734816266242578152965732255342339150813863655940370992607472514701547833846745824611650562764418672097010581841308092272219554901499381364248273623821263010735245598461689204992932669171932728231006886657561855122784643413082754917680954273472511809967246041682775739445062096679384974844042704632306636062198359854911750702812430163260353927688697204429721324853151106444971794964479910146456580234093548473145326760318715232937097790886919696648214240154917858203851667105311698798078423818158989688919219599049885254255565605366601996383347654038156499264777785009352905155107612227006668207496637763158638213679116314729629504546124783439649206582237018090052173847416061302399576311283494350942136664270079107154063708493279141566647813455576569113882316695557820003616762197767086181091566771316767305464979702718677483839669251118986245221810216719196746974553912205192905531048811275, 1362516454171862826465423940007896745693942465836212912259096452801385357483109712533090273858627473276792423646168239374831207459714374893310862324474367542641823781738344444116393727063189179472565092954132209159796440144240841023171099496524446745050047978595326525375739929319395201764313796060257118853114314110276542959550957977345721046754230110666663465871578656524730991644970323161721628016049727117928436297167284161063462291108040794349238015532904048658608346817527962862062460338058948954507464173945950282061218218196680753023059654443613682648353967386868148713237349056062422059620258562332156878748202134846170517174264178514685735648199564309847455934723983715618575511831572041018598725656464141672999755341954193198575801997732879424977387817647116886285977533310699845898033600127878728576045632997623408121259750361469100204362846451239718806829920667496051928071046475498646793163405578849223623711766, 1067762353383580551135839014404432778344245015772335522559661715077801215059259278998279021636141661267632046925627500932847877616603353399832051093575796753805216641721588507051916475065653434620372212575320083795000187190904597691267095148235681925571905202830871679851700909766689440522456640046283108306570546062322346597875032192151434600126190670540359054192048253454340346668001208481186360502295474903333744646065148044584203676525446559706906152629616261075442944713852170654839314000690403214745356975119453678049008961017023224480790774477932824777461739944610658188254616612303815153390608747991551205368461250073829421863420451485531060826807431483884155896119735028409616392162307393606130402295707351555020256436469766032404316910741523128005579634432571993126390853769433951171869680992323575278807076884287865718220148569528293701526932913887662218970560563575010365374400226657905762528657092783512158079230]
S = 3158877261747170227933171765036871433528512321055490196212967910318364429646062209857521876916159557930129666655109071581698487586878015465613496362339412808850434587376781102577974794286733759481375156574287647473082951387816578331687106875169702351551995520805745168930403499172063949372632492303144039069924603281508438730408368910788768095565712914611942411213913097290613890173603641720764115352166209518815903776983270259895622484299690592428828513437436815921849045735336294064710569982102286369754581315446301346887738578231305312868190511307997323056205759476429099941563215803677441929342373135391313546569967901805654730949504685443085171970441739975056366141584394100254156529267108058381582132673754813129499207226560385582262281142698902507235730641377755888378856612265592855491633033814761287243030204157967413609296446891115735862475292648665049897146958510743515147946646408502534215651274479135529306257204
Z = 1081847561503614272019698987802918901137595129351720364543455604029614896648566550836917485704538442467570516045692696144737938842749008959325067689870563313839984366166118876831696312585734213889755949188135187917936951033543886754861340936771635861515936061706288007650554150369141787834615665285804082646635824771996161904456944241001513318199687005192535736051856002105966143542941009232766063769796559089719460799471103107003922910401123054792207033403208326640601265026256758084756892550015453298865296389457009828368296193555006503431951620666185283956945626532174848890463247972476986883005451281072248820578712644887029173140043463515344178248729326906730932322425955019787355952121905343578172245117383258153613757094546229819597449535777131287581512840134860182852195520487297754187988870638571006645244124737391599159048741641862862745162646724263928251807438191257416872012522546978290241019498037556203771438663

# Random Values:
v = 654671824456777219652346992867510087452212166114968701545910942952091121622112746156990349070961452148860376720831950798312197450766246824784080733014046252963734155048583326731280382293616188983912637757247490994134629330532195580185840805308883310892596697184472355715553141495826312755328377140784745150265379895750720993018126057154831983174916794530919730650307200963941003018876409147386940897668082078766480477827328301029796277743754598293877575928072808973258839963503463480166821397108546716171125444499692569916119887969930293047808484483273731991341192429839395439534141080457006319937166802684530909784068883785506166993489700586680366768423556053862169783609543635311890846239387114538930159414622420235484998108726586641428521794864504382328757606950689879098678386420605325447766876632966595473475790750546381184756393588593932117938456568203825601986951442140336748646534884150544366919313446605434742292492
r = 3049937574555449399620115139050483235536535269458720093879241714475985644286784305930376419269591571692860672771237159858248112691075420677785965568027919218957173979090956738445837898005526235497303005338345543435910569889677149992957408113869404430878685522531254808371205526376368096602715542178562090721428412515988076310933307649707847331395058812845158162107795726601894194689598822186522538852013424191712716605670775475208908827300854791096866464490645549565329498734920345592045558057664021486623394952966844538107254087646800330136844582199535838433822537938085201500518144608094217176125788879495030448298666637849627971813879060239531645892709088857251471775727616635752937355832238024126655208046939174402585015628995398160507003862768827690362163546223701510108544156309227783494295826521029789617185728864165753519745882612493419788785649606663280096250258108800499884145638256151316593610811365436767366774647

R0 = R_values[0]  # R0 for the user's secret key
R_attributes = R_values[1:]  # R1 to R6 for attributes /*important*/


ATTRIBUTE_ORDER = ['appointment_token_id', 'expiration_date']

# User's private key
sk_user = 17304765680399877985603549156602165040317349863534909960824703260664115188005314383251413388475509418285750437797512658247933731564609469620976572906899147469047469887962579684739486778701980430346446321047488914359791851791139784526292922401723187689749972813113085232791979266364003313836365197957166825071559991192573379064100196327396995359152684197702309998257340184443026266288319011820495800045861852371823748758949393171374448839279286169397125792444022976661238526330260402304122797946075324472645068283108408038784858222678196156475420470935657199584768392650117759440320863062033482833553787859584529184659
pk_user = pow(R0, sk_user, n)


# Function to hash and reduce an attribute
def hash_and_reduce(attribute, n):
    attribute_hash = hashlib.sha256(attribute.encode()).hexdigest()
    attribute_int = int(attribute_hash, 16)
    return attribute_int % n

# Schnorr signature parameters for a discrete logarithm group.
# These must be known by both the signer (patient) and verifier (healthcare provider).

p1 = 162259276829213363391578010288127
q1 = 81129638414606681695789005144063
g1_schnorr = 2

file_path = "/home/nmuslim162022/Desktop/mycode/patient_pseudonym_data.json"

def read_json_file(file_path):
    with open(file_path, "r") as json_file:
        return json.load(json_file)

def group_element_to_hex(element):
    return encode(element).hex()

def hex_to_group_element(hex_str, group):
    element_bytes = bytes.fromhex(hex_str)
    return decode(element_bytes)

def group_element_to_scalar(elem):
    """Hash a group element to a scalar in Zq."""
    h = hashlib.sha256(encode(elem))
    scalar = int.from_bytes(h.digest(), 'big') % q1
    return scalar


# --- Schnorr Signature Functions ---
def schnorr_signature_generate(msg_bytes, sk_sum):
    """
    Generates a Schnorr signature.
    Args:
        msg_bytes (bytes): The message (or hash of the message) to be signed.
        sk_sum (int): The private signing key.
    """
    r = 123456789  # Use random in production!
    R = pow(g1_schnorr, r, p1)
    h = hashlib.sha256()
    h.update(R.to_bytes((p1.bit_length() + 7) // 8, 'big') + msg_bytes)
    c = int.from_bytes(h.digest(), 'big') % q1
    s = (r - c * sk_sum) % q1
    return s, c

def schnorr_signature_verify(msg_bytes, s, c, Y_sum):
    """
    Verifies a Schnorr signature.
    Args:
        msg_bytes (bytes): The original message (or hash) that was signed.
        s, c (int): The signature components.
        Y_sum (int): The public key corresponding to the private key used for signing.
    """
    R_prime = (pow(g1_schnorr, s, p1) * pow(Y_sum, c, p1)) % p1
    h = hashlib.sha256()
    h.update(R_prime.to_bytes((p1.bit_length() + 7) // 8, 'big') + msg_bytes)
    c_prime = int.from_bytes(h.digest(), 'big') % q1
    return c_prime == c





num_iterations = 1 #12
execution_times = []

for i in range(num_iterations):
 
        start_time = time.perf_counter_ns()

        # Initialize the elliptic curve group (BN254 is the default).
        group = BpGroup()

        # *** Generate of proof of knowledge of the user' patient id of the patient credential
        # File path of the JSON file
        file_path = r"/home/nmuslim162022/Desktop/mycode/patient_pseudonym_data.json"

        # Load the JSON file
        with open(file_path, 'r') as file:
            patient_pseudonym_data = json.load(file)

        # Deserialize the hex strings from the file back into elliptic curve group elements.
        P_patient_a = hex_to_group_element(patient_pseudonym_data['P_patient_a'], group)
        P_patient_b = hex_to_group_element(patient_pseudonym_data['P_patient_b'], group)
        rk_patient_to_HRR = patient_pseudonym_data['rk_patient_to_HRR']
        encrypted_pid =  patient_pseudonym_data['encrypted_pid']

        """
        print ("P_patient_a: ", P_patient_a)
        print ("P_patient_b: ", P_patient_b)
        print ("rk_patient_to_HRR: ", rk_patient_to_HRR)
        print ("encrypted_pid: ", encrypted_pid)
        """

        # --- Derive the Schnorr Signing Key from the Pseudonym ---
        # To sign the appointment request, the patient needs a private key that is
        # uniquely and deterministically linked to their pseudonym.

        # Step 1: Hash group elements to scalars
        sk_a = group_element_to_scalar(P_patient_a)
        sk_b = group_element_to_scalar(P_patient_b)

        ## Step 2: Combine the scalars to create the patient's Schnorr private key based on pseudonym.
        sk_schnorr_appointment_booking = (sk_a + sk_b) % q1

        # Step 3: patient's Schnorr publicv key based on pseudonym. This will be sent with the signature
        # so the healthcare provider can verify it.
        Y_schnorr_appointment_booking = pow(g1_schnorr, sk_schnorr_appointment_booking, p1)

        # Load the single-use Appointment Token (AT) which was issued by the APC.
        file_path = r"/home/nmuslim162022/Desktop/mycode/AT_credential_signature.json"

        # Load the JSON file
        with open(file_path, 'r') as file:
            AT = json.load(file)

        #print ("AT_credential: ", AT)

        # --- Construct and Sign the AppointmentScheduleRequest ---

        # Assemble the main body (the 'info' part) of the request. This contains all
        # the necessary information for the provider to book the appointment and
        # later verify the patient's identity.
        P_patient_a_hex = group_element_to_hex(P_patient_a)
        P_patient_b_hex = group_element_to_hex(P_patient_b)
        # Construct the credential with signature
        AppointmentScheduleRequest = {
            'info': {
                "Ppatient": [P_patient_a_hex, P_patient_b_hex],
                "rkpatient_to_HRR": rk_patient_to_HRR,
                "ctPID": encrypted_pid,
                "AT": AT,
                "ScheduleInfo": "schedule_info"
            },
            'signature': None                     # The signature will be added in the next steps.
        }

        
        # calculate the byte of the payload (AppointmentScheduleRequest)
        serialized_payload = json.dumps(AppointmentScheduleRequest['info'], sort_keys=True, separators=(',', ':')).encode('utf-8')

        # calculate HASH of the payload in bytes
        payload_hash = hashlib.sha256(serialized_payload).digest()
        print ("payload_hash: ", payload_hash)


        # Generate the Schnorr signature using the private key derived from the pseudonym.
        s, c = schnorr_signature_generate(payload_hash, sk_schnorr_appointment_booking)
        """
        print("Signature (using sk_schnorr_appointment_booking):")
        print("s:", s)
        print("c:", c)
        print("Y_schnorr_appointment_booking:", Y_schnorr_appointment_booking)
        """


        signature = {
            "c": c,
            "s": s,
            "Y_schnorr_appointment_booking": Y_schnorr_appointment_booking  # Directly convert Y_sign to hex since it's an integer
        }

        AppointmentScheduleRequest ['signature'] = signature

        #print ("AppointmentScheduleRequest: ", AppointmentScheduleRequest)


    ##############################################
    # computation by the Healthcare provider
    ##############################################

    # Healthcare provider verify 
    # 1. signature of the patient on the AppointmentScheduleRequest based on schnorr signature scheme 
    # 2. signature of the AT based on CL(RSA) signature scheme

 



        # It's crucial to serialize in a consistent way (sorted keys) so the signature is always verifiable.
        # The result must be bytes.
        serialized_payload = json.dumps(AppointmentScheduleRequest['info'], sort_keys=True, separators=(',', ':')).encode('utf-8')

        # Typically, you sign the HASH of the data, not the raw data itself.
        payload_hash = hashlib.sha256(serialized_payload).digest()

        # Step: Verify
        valid = schnorr_signature_verify(payload_hash, AppointmentScheduleRequest['signature']['s'], AppointmentScheduleRequest['signature']['c'], AppointmentScheduleRequest['signature']['Y_schnorr_appointment_booking'])
        #print("AppointmentScheduleRequest Signature valid?", valid)


        # verify AT signature
        #print ( "AppointmentScheduleRequest['info']['AT']: ", AppointmentScheduleRequest['info']['AT'] )


        # Map AT attributes to m_i
        attribute_values = []
        for value in AppointmentScheduleRequest ['info']['AT']['info'].values():
            attribute_value = hash_and_reduce(value, n)
            attribute_values.append(attribute_value)

        #print ("Attribute Values: ", attribute_values)

        # Calculation of R_m
        R_m = 1
        for i, attr_value in enumerate(attribute_values):
            R_m = (R_m * pow(R_attributes[i], attr_value, n)) % n
        #print("R_m: ", R_m)    

        R = (R_m * pk_user) % n
        #print("R$: ", R)

        S_r_inv = pow(S, -r, n)                                          # Compute S^(-r) mod n
        A_prime = (AppointmentScheduleRequest ['info']['AT']['signature']['A'] * S_r_inv) % n   # Compute A * S^(-r) mod n
        v_prime = (v + AppointmentScheduleRequest ['info']['AT']['signature']['e'] * r)         # Compute v' = v + e*r

        Z_prime = ( pow(A_prime, AppointmentScheduleRequest ['info']['AT']['signature']['e'], n) * pow(S, v_prime, n) * R) % n # Compute Z' = A'^e * S^v' * R mod n
        #print ("Z_prime: ", Z_prime)


        if Z_prime == Z:
            print("AT Signature is valid.")


        characters = string.ascii_letters + string.digits  # Letters and digits
        appointment_confirmation_code = ''.join(random.choice(characters) for _ in range(6))    

        print ("appointment_confirmation_code: ", appointment_confirmation_code)

        end_time = time.perf_counter_ns()
        exec_time_ms = (end_time - start_time) / 1_000_000
        execution_times.append(exec_time_ms)



# Exclude first and last execution times (reduce noise)
trimmed_times = execution_times[1:-1]
'''
if trimmed_times:
    avg_time = np.mean(trimmed_times)
    std_time = np.std(trimmed_times)
    print("Execution Times:", execution_times)
    print("Trimmed Execution Times:", trimmed_times)
    print(f"Average Execution Time: {avg_time:.2f} ms")
    print(f"Standard Deviation: {std_time:.2f} ms")
else:
    print("No valid execution times to calculate performance metrics.")
'''
   






